{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to MkDocs For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files. Test of markdown docstring generation Figure Custom Figure class for creating multi-panelled figures. Constructor allows for a stylesheet to be passed in, allowing each Figure instance to have its own style. Inputs (optional) figsize: tuple(float, float), default is (6.5, 3). The size of the figure in inches (width, height). (optional) dpi: int, default is 150. The dpi of the created figure. (optional) style: str, default is None. The given style sheet for the figure. Accepts mpl.style_sheets or a path to a style sheet (optional) invert: bool, default is True. Invert's the y-axis of the global axis so that the origin is the upper left corner. Output Figure class instance. ****Note This class exists to solve a specific problem with saving figures in matplotlib. Figures in matplotlib have an invisible bounding box, like a picture frame. When saving the figure, only content within this bounding box is saved. When working in a notebook environment, this bounding box is ignored and the entire figure is always shown. This can cause many plot elements to be un- intentionally cut off when saving. with the viper.Figure class, the bounding box is always visible until the figure is saved. Thus, the user will always know what plot elements will be saved with the figure. Source code in src\\viper\\main_plotting\\Figure.pyclass Figure : \"\"\" Custom Figure class for creating multi-panelled figures. Constructor allows for a stylesheet to be passed in, allowing each Figure instance to have its own style. Inputs (optional) figsize: tuple(float, float), default is (6.5, 3). The size of the figure in inches (width, height). (optional) dpi: int, default is 150. The dpi of the created figure. (optional) style: str, default is None. The given style sheet for the figure. Accepts mpl.style_sheets or a path to a style sheet (optional) invert: bool, default is True. Invert's the y-axis of the global axis so that the origin is the upper left corner. Output Figure class instance. ****Note This class exists to solve a specific problem with saving figures in matplotlib. Figures in matplotlib have an invisible bounding box, like a picture frame. When saving the figure, only content within this bounding box is saved. When working in a notebook environment, this bounding box is ignored and the entire figure is always shown. This can cause many plot elements to be un- intentionally cut off when saving. with the viper.Figure class, the bounding box is always visible until the figure is saved. Thus, the user will always know what plot elements will be saved with the figure. \"\"\" def __init__ ( self , figsize = None , dpi = 150 , style = None , invert = True ): if figsize is None : figsize = ( 6.5 , 3 ) if style is not None : with plt . style . context ( style ): self . figure = plt . figure ( dpi = dpi , figsize = figsize ) self . axmain = plt . gca () else : self . figure = plt . figure ( dpi = dpi , figsize = figsize ) self . axmain = plt . gca () self . axmain . set_position ([ 0 , 0 , 1 , 1 ]) self . axmain . set_ylim ( 0 , figsize [ 1 ]) self . axmain . set_xlim ( 0 , figsize [ 0 ]) self . figsize = figsize self . dpi = dpi self . style = style self . axmain . spines [[ \"top\" , \"right\" , \"left\" , \"bottom\" ]] . set_visible ( True ) if invert : self . axmain . invert_yaxis () self . letters = [] #letters for annotating figure self . panels = [] #panels for figure def remove_figure_borders ( self ): \"\"\" Method to remove the window pane-like frame around the figure. \"\"\" self . axmain . axis ( \"off\" ) def remove_panel_borders ( self ): \"\"\" Method to remove borders around all panels within the Figure. \"\"\" for panel in self . panels : panel . spines . set_visible ( False ) def add_letter ( self , x , y , letter = None , fontsize = 9 , ha = \"left\" , va = \"top\" , color = None , zorder = 20 ): \"\"\" Method to add a letter to the Figure, useful for marking individual panels. Args: x (float): x coordinate of the letter in global figure axes coordinates. y (float): y coordinate of the letter in global figure axes coordinates. letter (str, optional): Letter or text to display. Defaults to next letter in the alphabet. fontsize (int, optional): Fontsize of the letter or text string. Defaults to 9. ha (str, optional): Horizontal alignment of the letter or text string. Defaults to \"left\". va (str, optional): Vertical alignment of the letter or text string. Defaults to \"top\". color (str, optional): Color of the letter or text string. Defaults to black. zorder (int, optional): Zorder of the letter or text string. Defaults to 20. \"\"\" if letter == None : letter_to_add = ascii_uppercase [ len ( self . letters )] else : letter_to_add = letter self . letters . append ( letter_to_add ) if color is None : color = \"white\" if \"dark\" in self . style else \"black\" if self . style is not None : with plt . style . context ( self . style ): self . axmain . text ( x , y , letter_to_add , ha = ha , va = va , fontweight = \"bold\" , color = color , fontsize = fontsize , zorder = zorder ) else : self . axmain . text ( x , y , letter_to_add , ha = ha , va = va , fontweight = \"bold\" , color = color , fontsize = fontsize , zorder = zorder ) def add_panel ( self , dim = None , style = None ): \"\"\" Method to add an individual panel to the Figure. The resulting axis is set as the current mpl axis. Args: dim (list[float], optional): A list containing the position and dimensions of the panel in inches. Defaults to [0.5, 0.3, 5.8, 2.3]. >>> Ordering is [x, y, width, height] style (str, optional): A valid matplotlib.stylesheet name for this panel. Defaults to None. Returns: matplotlib.Axis: The axis created by add_panel() \"\"\" if dim is None : dim = [ 0.5 , 0.3 , 5.75 , 2.3 ] if self . style is not None and style is None : with plt . style . context ( self . style ): panel = self . axmain . inset_axes ( dim , transform = self . axmain . transData ) elif style is not None : with plt . style . context ( style ): panel = self . axmain . inset_axes ( dim , transform = self . axmain . transData ) else : panel = self . axmain . inset_axes ( dim , transform = self . axmain . transData ) self . panels . append ( panel ) self . figure . add_axes ( panel ) plt . sca ( panel ) return panel def highlight_panel ( self , panel , color = \"red\" ): \"\"\" Method to highlight an individual panel by coloring its axis. Args: panel (matplotlib.Axis): Panel to color color (str, optional): Color of the highlight. Defaults to \"red\". \"\"\" if isinstance ( panel , int ): for spine in self . panels [ panel ] . spines : self . panels [ panel ] . spines [ spine ] . set_color ( color ) self . panels [ panel ] . spines [ spine ] . set_visible ( True ) elif isinstance ( panel , Axes ): panel . axis ( \"on\" ) for spine in panel . spines : panel . spines [ spine ] . set_color ( color ) panel . spines [ spine ] . set_visible ( True ) def make_transparent ( self ): \"\"\" Method to set the transparency of the Figure and all of its panels to 0. \"\"\" self . figure . patch . set_alpha ( 0 ) self . axmain . patch . set_alpha ( 0 ) for ax in self . panels : ax . patch . set_alpha ( 0 ) def savefig ( self , path , dpi = 300 , transparent = False , ** kwargs ): \"\"\" Method to safe the figure in a desired format. Args: path (or path-like object): The file path to save the Figure dpi (int, optional): Dpi of the image. Defaults to 300. transparent (bool, optional): Option to turn the figure transparent. Defaults to False. kwargs (optional): Accepts any keyword arguments used by matplotlib.Figure.savefig() \"\"\" self . remove_figure_borders () if transparent : self . make_transparent () self . figure . savefig ( path , dpi = dpi , ** kwargs ) add_letter ( x , y , letter = None , fontsize = 9 , ha = 'left' , va = 'top' , color = None , zorder = 20 ) Method to add a letter to the Figure, useful for marking individual panels. Parameters: Name Type Description Default x float x coordinate of the letter in global figure axes coordinates. required y float y coordinate of the letter in global figure axes coordinates. required letter str Letter or text to display. Defaults to next letter in the alphabet. None fontsize int Fontsize of the letter or text string. Defaults to 9. 9 ha str Horizontal alignment of the letter or text string. Defaults to \"left\". 'left' va str Vertical alignment of the letter or text string. Defaults to \"top\". 'top' color str Color of the letter or text string. Defaults to black. None zorder int Zorder of the letter or text string. Defaults to 20. 20 Source code in src\\viper\\main_plotting\\Figure.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 def add_letter ( self , x , y , letter = None , fontsize = 9 , ha = \"left\" , va = \"top\" , color = None , zorder = 20 ): \"\"\" Method to add a letter to the Figure, useful for marking individual panels. Args: x (float): x coordinate of the letter in global figure axes coordinates. y (float): y coordinate of the letter in global figure axes coordinates. letter (str, optional): Letter or text to display. Defaults to next letter in the alphabet. fontsize (int, optional): Fontsize of the letter or text string. Defaults to 9. ha (str, optional): Horizontal alignment of the letter or text string. Defaults to \"left\". va (str, optional): Vertical alignment of the letter or text string. Defaults to \"top\". color (str, optional): Color of the letter or text string. Defaults to black. zorder (int, optional): Zorder of the letter or text string. Defaults to 20. \"\"\" if letter == None : letter_to_add = ascii_uppercase [ len ( self . letters )] else : letter_to_add = letter self . letters . append ( letter_to_add ) if color is None : color = \"white\" if \"dark\" in self . style else \"black\" if self . style is not None : with plt . style . context ( self . style ): self . axmain . text ( x , y , letter_to_add , ha = ha , va = va , fontweight = \"bold\" , color = color , fontsize = fontsize , zorder = zorder ) else : self . axmain . text ( x , y , letter_to_add , ha = ha , va = va , fontweight = \"bold\" , color = color , fontsize = fontsize , zorder = zorder ) add_panel ( dim = None , style = None ) Method to add an individual panel to the Figure. The resulting axis is set as the current mpl axis. Parameters: Name Type Description Default dim list [ float ] A list containing the position and dimensions of the panel in inches. Defaults to [0.5, 0.3, 5.8, 2.3]. Ordering is [x, y, width, height] None style str A valid matplotlib.stylesheet name for this panel. Defaults to None. None Returns: Type Description matplotlib.Axis: The axis created by add_panel() Source code in src\\viper\\main_plotting\\Figure.py 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 def add_panel ( self , dim = None , style = None ): \"\"\" Method to add an individual panel to the Figure. The resulting axis is set as the current mpl axis. Args: dim (list[float], optional): A list containing the position and dimensions of the panel in inches. Defaults to [0.5, 0.3, 5.8, 2.3]. >>> Ordering is [x, y, width, height] style (str, optional): A valid matplotlib.stylesheet name for this panel. Defaults to None. Returns: matplotlib.Axis: The axis created by add_panel() \"\"\" if dim is None : dim = [ 0.5 , 0.3 , 5.75 , 2.3 ] if self . style is not None and style is None : with plt . style . context ( self . style ): panel = self . axmain . inset_axes ( dim , transform = self . axmain . transData ) elif style is not None : with plt . style . context ( style ): panel = self . axmain . inset_axes ( dim , transform = self . axmain . transData ) else : panel = self . axmain . inset_axes ( dim , transform = self . axmain . transData ) self . panels . append ( panel ) self . figure . add_axes ( panel ) plt . sca ( panel ) return panel highlight_panel ( panel , color = 'red' ) Method to highlight an individual panel by coloring its axis. Parameters: Name Type Description Default panel Axis Panel to color required color str Color of the highlight. Defaults to \"red\". 'red' Source code in src\\viper\\main_plotting\\Figure.py 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 def highlight_panel ( self , panel , color = \"red\" ): \"\"\" Method to highlight an individual panel by coloring its axis. Args: panel (matplotlib.Axis): Panel to color color (str, optional): Color of the highlight. Defaults to \"red\". \"\"\" if isinstance ( panel , int ): for spine in self . panels [ panel ] . spines : self . panels [ panel ] . spines [ spine ] . set_color ( color ) self . panels [ panel ] . spines [ spine ] . set_visible ( True ) elif isinstance ( panel , Axes ): panel . axis ( \"on\" ) for spine in panel . spines : panel . spines [ spine ] . set_color ( color ) panel . spines [ spine ] . set_visible ( True ) make_transparent () Method to set the transparency of the Figure and all of its panels to 0. Source code in src\\viper\\main_plotting\\Figure.py 152 153 154 155 156 157 158 159 160 161 def make_transparent ( self ): \"\"\" Method to set the transparency of the Figure and all of its panels to 0. \"\"\" self . figure . patch . set_alpha ( 0 ) self . axmain . patch . set_alpha ( 0 ) for ax in self . panels : ax . patch . set_alpha ( 0 ) remove_figure_borders () Method to remove the window pane-like frame around the figure. Source code in src\\viper\\main_plotting\\Figure.py 59 60 61 62 63 def remove_figure_borders ( self ): \"\"\" Method to remove the window pane-like frame around the figure. \"\"\" self . axmain . axis ( \"off\" ) remove_panel_borders () Method to remove borders around all panels within the Figure. Source code in src\\viper\\main_plotting\\Figure.py 65 66 67 68 69 70 def remove_panel_borders ( self ): \"\"\" Method to remove borders around all panels within the Figure. \"\"\" for panel in self . panels : panel . spines . set_visible ( False ) savefig ( path , dpi = 300 , transparent = False , ** kwargs ) Method to safe the figure in a desired format. Parameters: Name Type Description Default path or path-like object The file path to save the Figure required dpi int Dpi of the image. Defaults to 300. 300 transparent bool Option to turn the figure transparent. Defaults to False. False kwargs optional Accepts any keyword arguments used by matplotlib.Figure.savefig() {} Source code in src\\viper\\main_plotting\\Figure.py 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 def savefig ( self , path , dpi = 300 , transparent = False , ** kwargs ): \"\"\" Method to safe the figure in a desired format. Args: path (or path-like object): The file path to save the Figure dpi (int, optional): Dpi of the image. Defaults to 300. transparent (bool, optional): Option to turn the figure transparent. Defaults to False. kwargs (optional): Accepts any keyword arguments used by matplotlib.Figure.savefig() \"\"\" self . remove_figure_borders () if transparent : self . make_transparent () self . figure . savefig ( path , dpi = dpi , ** kwargs )","title":"Welcome to MkDocs"},{"location":"#welcome-to-mkdocs","text":"For full documentation visit mkdocs.org .","title":"Welcome to MkDocs"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"#test-of-markdown-docstring-generation","text":"","title":"Test of markdown docstring generation"},{"location":"#viper.Figure.Figure","text":"Custom Figure class for creating multi-panelled figures. Constructor allows for a stylesheet to be passed in, allowing each Figure instance to have its own style. Inputs (optional) figsize: tuple(float, float), default is (6.5, 3). The size of the figure in inches (width, height). (optional) dpi: int, default is 150. The dpi of the created figure. (optional) style: str, default is None. The given style sheet for the figure. Accepts mpl.style_sheets or a path to a style sheet (optional) invert: bool, default is True. Invert's the y-axis of the global axis so that the origin is the upper left corner. Output Figure class instance. ****Note This class exists to solve a specific problem with saving figures in matplotlib. Figures in matplotlib have an invisible bounding box, like a picture frame. When saving the figure, only content within this bounding box is saved. When working in a notebook environment, this bounding box is ignored and the entire figure is always shown. This can cause many plot elements to be un- intentionally cut off when saving. with the viper.Figure class, the bounding box is always visible until the figure is saved. Thus, the user will always know what plot elements will be saved with the figure. Source code in src\\viper\\main_plotting\\Figure.pyclass Figure : \"\"\" Custom Figure class for creating multi-panelled figures. Constructor allows for a stylesheet to be passed in, allowing each Figure instance to have its own style. Inputs (optional) figsize: tuple(float, float), default is (6.5, 3). The size of the figure in inches (width, height). (optional) dpi: int, default is 150. The dpi of the created figure. (optional) style: str, default is None. The given style sheet for the figure. Accepts mpl.style_sheets or a path to a style sheet (optional) invert: bool, default is True. Invert's the y-axis of the global axis so that the origin is the upper left corner. Output Figure class instance. ****Note This class exists to solve a specific problem with saving figures in matplotlib. Figures in matplotlib have an invisible bounding box, like a picture frame. When saving the figure, only content within this bounding box is saved. When working in a notebook environment, this bounding box is ignored and the entire figure is always shown. This can cause many plot elements to be un- intentionally cut off when saving. with the viper.Figure class, the bounding box is always visible until the figure is saved. Thus, the user will always know what plot elements will be saved with the figure. \"\"\" def __init__ ( self , figsize = None , dpi = 150 , style = None , invert = True ): if figsize is None : figsize = ( 6.5 , 3 ) if style is not None : with plt . style . context ( style ): self . figure = plt . figure ( dpi = dpi , figsize = figsize ) self . axmain = plt . gca () else : self . figure = plt . figure ( dpi = dpi , figsize = figsize ) self . axmain = plt . gca () self . axmain . set_position ([ 0 , 0 , 1 , 1 ]) self . axmain . set_ylim ( 0 , figsize [ 1 ]) self . axmain . set_xlim ( 0 , figsize [ 0 ]) self . figsize = figsize self . dpi = dpi self . style = style self . axmain . spines [[ \"top\" , \"right\" , \"left\" , \"bottom\" ]] . set_visible ( True ) if invert : self . axmain . invert_yaxis () self . letters = [] #letters for annotating figure self . panels = [] #panels for figure def remove_figure_borders ( self ): \"\"\" Method to remove the window pane-like frame around the figure. \"\"\" self . axmain . axis ( \"off\" ) def remove_panel_borders ( self ): \"\"\" Method to remove borders around all panels within the Figure. \"\"\" for panel in self . panels : panel . spines . set_visible ( False ) def add_letter ( self , x , y , letter = None , fontsize = 9 , ha = \"left\" , va = \"top\" , color = None , zorder = 20 ): \"\"\" Method to add a letter to the Figure, useful for marking individual panels. Args: x (float): x coordinate of the letter in global figure axes coordinates. y (float): y coordinate of the letter in global figure axes coordinates. letter (str, optional): Letter or text to display. Defaults to next letter in the alphabet. fontsize (int, optional): Fontsize of the letter or text string. Defaults to 9. ha (str, optional): Horizontal alignment of the letter or text string. Defaults to \"left\". va (str, optional): Vertical alignment of the letter or text string. Defaults to \"top\". color (str, optional): Color of the letter or text string. Defaults to black. zorder (int, optional): Zorder of the letter or text string. Defaults to 20. \"\"\" if letter == None : letter_to_add = ascii_uppercase [ len ( self . letters )] else : letter_to_add = letter self . letters . append ( letter_to_add ) if color is None : color = \"white\" if \"dark\" in self . style else \"black\" if self . style is not None : with plt . style . context ( self . style ): self . axmain . text ( x , y , letter_to_add , ha = ha , va = va , fontweight = \"bold\" , color = color , fontsize = fontsize , zorder = zorder ) else : self . axmain . text ( x , y , letter_to_add , ha = ha , va = va , fontweight = \"bold\" , color = color , fontsize = fontsize , zorder = zorder ) def add_panel ( self , dim = None , style = None ): \"\"\" Method to add an individual panel to the Figure. The resulting axis is set as the current mpl axis. Args: dim (list[float], optional): A list containing the position and dimensions of the panel in inches. Defaults to [0.5, 0.3, 5.8, 2.3]. >>> Ordering is [x, y, width, height] style (str, optional): A valid matplotlib.stylesheet name for this panel. Defaults to None. Returns: matplotlib.Axis: The axis created by add_panel() \"\"\" if dim is None : dim = [ 0.5 , 0.3 , 5.75 , 2.3 ] if self . style is not None and style is None : with plt . style . context ( self . style ): panel = self . axmain . inset_axes ( dim , transform = self . axmain . transData ) elif style is not None : with plt . style . context ( style ): panel = self . axmain . inset_axes ( dim , transform = self . axmain . transData ) else : panel = self . axmain . inset_axes ( dim , transform = self . axmain . transData ) self . panels . append ( panel ) self . figure . add_axes ( panel ) plt . sca ( panel ) return panel def highlight_panel ( self , panel , color = \"red\" ): \"\"\" Method to highlight an individual panel by coloring its axis. Args: panel (matplotlib.Axis): Panel to color color (str, optional): Color of the highlight. Defaults to \"red\". \"\"\" if isinstance ( panel , int ): for spine in self . panels [ panel ] . spines : self . panels [ panel ] . spines [ spine ] . set_color ( color ) self . panels [ panel ] . spines [ spine ] . set_visible ( True ) elif isinstance ( panel , Axes ): panel . axis ( \"on\" ) for spine in panel . spines : panel . spines [ spine ] . set_color ( color ) panel . spines [ spine ] . set_visible ( True ) def make_transparent ( self ): \"\"\" Method to set the transparency of the Figure and all of its panels to 0. \"\"\" self . figure . patch . set_alpha ( 0 ) self . axmain . patch . set_alpha ( 0 ) for ax in self . panels : ax . patch . set_alpha ( 0 ) def savefig ( self , path , dpi = 300 , transparent = False , ** kwargs ): \"\"\" Method to safe the figure in a desired format. Args: path (or path-like object): The file path to save the Figure dpi (int, optional): Dpi of the image. Defaults to 300. transparent (bool, optional): Option to turn the figure transparent. Defaults to False. kwargs (optional): Accepts any keyword arguments used by matplotlib.Figure.savefig() \"\"\" self . remove_figure_borders () if transparent : self . make_transparent () self . figure . savefig ( path , dpi = dpi , ** kwargs )","title":"Figure"},{"location":"#viper.Figure.Figure.add_letter","text":"Method to add a letter to the Figure, useful for marking individual panels. Parameters: Name Type Description Default x float x coordinate of the letter in global figure axes coordinates. required y float y coordinate of the letter in global figure axes coordinates. required letter str Letter or text to display. Defaults to next letter in the alphabet. None fontsize int Fontsize of the letter or text string. Defaults to 9. 9 ha str Horizontal alignment of the letter or text string. Defaults to \"left\". 'left' va str Vertical alignment of the letter or text string. Defaults to \"top\". 'top' color str Color of the letter or text string. Defaults to black. None zorder int Zorder of the letter or text string. Defaults to 20. 20 Source code in src\\viper\\main_plotting\\Figure.py 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 def add_letter ( self , x , y , letter = None , fontsize = 9 , ha = \"left\" , va = \"top\" , color = None , zorder = 20 ): \"\"\" Method to add a letter to the Figure, useful for marking individual panels. Args: x (float): x coordinate of the letter in global figure axes coordinates. y (float): y coordinate of the letter in global figure axes coordinates. letter (str, optional): Letter or text to display. Defaults to next letter in the alphabet. fontsize (int, optional): Fontsize of the letter or text string. Defaults to 9. ha (str, optional): Horizontal alignment of the letter or text string. Defaults to \"left\". va (str, optional): Vertical alignment of the letter or text string. Defaults to \"top\". color (str, optional): Color of the letter or text string. Defaults to black. zorder (int, optional): Zorder of the letter or text string. Defaults to 20. \"\"\" if letter == None : letter_to_add = ascii_uppercase [ len ( self . letters )] else : letter_to_add = letter self . letters . append ( letter_to_add ) if color is None : color = \"white\" if \"dark\" in self . style else \"black\" if self . style is not None : with plt . style . context ( self . style ): self . axmain . text ( x , y , letter_to_add , ha = ha , va = va , fontweight = \"bold\" , color = color , fontsize = fontsize , zorder = zorder ) else : self . axmain . text ( x , y , letter_to_add , ha = ha , va = va , fontweight = \"bold\" , color = color , fontsize = fontsize , zorder = zorder )","title":"add_letter"},{"location":"#viper.Figure.Figure.add_panel","text":"Method to add an individual panel to the Figure. The resulting axis is set as the current mpl axis. Parameters: Name Type Description Default dim list [ float ] A list containing the position and dimensions of the panel in inches. Defaults to [0.5, 0.3, 5.8, 2.3]. Ordering is [x, y, width, height] None style str A valid matplotlib.stylesheet name for this panel. Defaults to None. None Returns: Type Description matplotlib.Axis: The axis created by add_panel() Source code in src\\viper\\main_plotting\\Figure.py 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 def add_panel ( self , dim = None , style = None ): \"\"\" Method to add an individual panel to the Figure. The resulting axis is set as the current mpl axis. Args: dim (list[float], optional): A list containing the position and dimensions of the panel in inches. Defaults to [0.5, 0.3, 5.8, 2.3]. >>> Ordering is [x, y, width, height] style (str, optional): A valid matplotlib.stylesheet name for this panel. Defaults to None. Returns: matplotlib.Axis: The axis created by add_panel() \"\"\" if dim is None : dim = [ 0.5 , 0.3 , 5.75 , 2.3 ] if self . style is not None and style is None : with plt . style . context ( self . style ): panel = self . axmain . inset_axes ( dim , transform = self . axmain . transData ) elif style is not None : with plt . style . context ( style ): panel = self . axmain . inset_axes ( dim , transform = self . axmain . transData ) else : panel = self . axmain . inset_axes ( dim , transform = self . axmain . transData ) self . panels . append ( panel ) self . figure . add_axes ( panel ) plt . sca ( panel ) return panel","title":"add_panel"},{"location":"#viper.Figure.Figure.highlight_panel","text":"Method to highlight an individual panel by coloring its axis. Parameters: Name Type Description Default panel Axis Panel to color required color str Color of the highlight. Defaults to \"red\". 'red' Source code in src\\viper\\main_plotting\\Figure.py 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 def highlight_panel ( self , panel , color = \"red\" ): \"\"\" Method to highlight an individual panel by coloring its axis. Args: panel (matplotlib.Axis): Panel to color color (str, optional): Color of the highlight. Defaults to \"red\". \"\"\" if isinstance ( panel , int ): for spine in self . panels [ panel ] . spines : self . panels [ panel ] . spines [ spine ] . set_color ( color ) self . panels [ panel ] . spines [ spine ] . set_visible ( True ) elif isinstance ( panel , Axes ): panel . axis ( \"on\" ) for spine in panel . spines : panel . spines [ spine ] . set_color ( color ) panel . spines [ spine ] . set_visible ( True )","title":"highlight_panel"},{"location":"#viper.Figure.Figure.make_transparent","text":"Method to set the transparency of the Figure and all of its panels to 0. Source code in src\\viper\\main_plotting\\Figure.py 152 153 154 155 156 157 158 159 160 161 def make_transparent ( self ): \"\"\" Method to set the transparency of the Figure and all of its panels to 0. \"\"\" self . figure . patch . set_alpha ( 0 ) self . axmain . patch . set_alpha ( 0 ) for ax in self . panels : ax . patch . set_alpha ( 0 )","title":"make_transparent"},{"location":"#viper.Figure.Figure.remove_figure_borders","text":"Method to remove the window pane-like frame around the figure. Source code in src\\viper\\main_plotting\\Figure.py 59 60 61 62 63 def remove_figure_borders ( self ): \"\"\" Method to remove the window pane-like frame around the figure. \"\"\" self . axmain . axis ( \"off\" )","title":"remove_figure_borders"},{"location":"#viper.Figure.Figure.remove_panel_borders","text":"Method to remove borders around all panels within the Figure. Source code in src\\viper\\main_plotting\\Figure.py 65 66 67 68 69 70 def remove_panel_borders ( self ): \"\"\" Method to remove borders around all panels within the Figure. \"\"\" for panel in self . panels : panel . spines . set_visible ( False )","title":"remove_panel_borders"},{"location":"#viper.Figure.Figure.savefig","text":"Method to safe the figure in a desired format. Parameters: Name Type Description Default path or path-like object The file path to save the Figure required dpi int Dpi of the image. Defaults to 300. 300 transparent bool Option to turn the figure transparent. Defaults to False. False kwargs optional Accepts any keyword arguments used by matplotlib.Figure.savefig() {} Source code in src\\viper\\main_plotting\\Figure.py 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 def savefig ( self , path , dpi = 300 , transparent = False , ** kwargs ): \"\"\" Method to safe the figure in a desired format. Args: path (or path-like object): The file path to save the Figure dpi (int, optional): Dpi of the image. Defaults to 300. transparent (bool, optional): Option to turn the figure transparent. Defaults to False. kwargs (optional): Accepts any keyword arguments used by matplotlib.Figure.savefig() \"\"\" self . remove_figure_borders () if transparent : self . make_transparent () self . figure . savefig ( path , dpi = dpi , ** kwargs )","title":"savefig"}]}